plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.8"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = 'project-seminario.jar'  // Nome desejado do JAR
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sonarqube {
    properties {
        property "sonar.projectKey", "project-seminario" // Substitua pelo seu valor
        property "sonar.host.url", "http://localhost:9000" // URL do SonarQube
        property "sonar.login", "sqp_8d8243a5489917a72e8deed1a4818bec422cf41c" // Token de autenticação do SonarQube
        property "sonar.java.coveragePlugin", "jacoco"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Garante que o relatório será gerado após os testes
}

jacocoTestReport {
    dependsOn test // Garante que os testes serão executados antes de gerar o relatório
    reports {
        xml.required = true
        html.required = true
    }
}